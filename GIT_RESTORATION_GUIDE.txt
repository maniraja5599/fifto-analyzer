üîÑ GIT CODE RESTORATION GUIDE
=================================

This guide shows different ways to restore your code in Git depending on your situation.

üìã STEP 1: CHECK YOUR CURRENT STATUS
====================================

First, open Command Prompt or PowerShell in your project directory and run:

```bash
git status
```

This will show you:
- Which files are modified
- Which files are staged
- Current branch information

```bash
git log --oneline -10
```

This shows your recent commits.

üéØ RESTORATION METHODS
======================

METHOD 1: DISCARD UNCOMMITTED CHANGES
--------------------------------------
If you have changes that are NOT committed yet:

```bash
# Discard changes to specific files
git checkout -- analyzer/views.py
git checkout -- analyzer/utils.py
git checkout -- templates/analyzer/index.html

# OR discard ALL uncommitted changes
git checkout .
```

METHOD 2: RESET TO PREVIOUS COMMIT
-----------------------------------
If you want to go back to a previous commit:

```bash
# See commit history
git log --oneline

# Reset to specific commit (replace COMMIT_HASH with actual hash)
git reset --hard COMMIT_HASH

# Reset to previous commit (1 commit back)
git reset --hard HEAD~1

# Reset to 2 commits back
git reset --hard HEAD~2
```

METHOD 3: REVERT SPECIFIC COMMIT
---------------------------------
If you want to undo a specific commit without losing others:

```bash
# Revert a specific commit (creates new commit)
git revert COMMIT_HASH
```

METHOD 4: RESTORE SPECIFIC FILES FROM PREVIOUS COMMIT
------------------------------------------------------
```bash
# Restore specific file from previous commit
git checkout HEAD~1 -- analyzer/views.py

# Restore from specific commit
git checkout COMMIT_HASH -- analyzer/utils.py
```

METHOD 5: CREATE NEW BRANCH FROM PREVIOUS STATE
------------------------------------------------
```bash
# Create new branch from previous commit
git checkout -b working-version HEAD~1

# Switch back to main when ready
git checkout main
```

üö® EMERGENCY RESTORATION
========================

If you want to restore to yesterday's working state:

```bash
# Option 1: Reset to yesterday
git reset --hard HEAD@{yesterday}

# Option 2: Find commits from yesterday
git log --since="yesterday" --oneline

# Option 3: Interactive reset
git reflog
# Find the commit hash from yesterday, then:
git reset --hard COMMIT_HASH
```

üîç FIND SPECIFIC COMMITS
========================

```bash
# Search commits by message
git log --grep="working"

# Search commits by date
git log --since="2025-07-30" --until="2025-07-31"

# Search commits by author
git log --author="your-name"

# Show file changes in commits
git log --stat
```

üìÅ BACKUP BEFORE RESTORATION
============================

ALWAYS backup your current work before major changes:

```bash
# Create backup branch
git branch backup-current

# Or copy files manually
cp -r analyzer analyzer_backup
cp -r templates templates_backup
```

üéØ QUICK RESTORATION FOR YOUR CASE
==================================

Based on your situation, try these commands in order:

1. CHECK STATUS:
```bash
git status
git log --oneline -5
```

2. IF YOU WANT TO RESTORE TO YESTERDAY:
```bash
git reflog
# Look for yesterday's commit, then:
git reset --hard COMMIT_HASH
```

3. IF YOU WANT TO DISCARD RECENT CHANGES:
```bash
git reset --hard HEAD~1
```

4. IF YOU WANT TO RESTORE SPECIFIC FILES:
```bash
git checkout HEAD~1 -- analyzer/views.py
git checkout HEAD~1 -- analyzer/utils.py
```

üí° TIPS
=======

- Use `git reflog` to see ALL recent actions
- Use `git stash` to temporarily save current changes
- Use `git diff` to see what changed
- Always backup important work before resetting

‚ö†Ô∏è WARNING
==========

`git reset --hard` will PERMANENTLY delete uncommitted changes!
Make sure to backup first.

üîÑ AFTER RESTORATION
====================

After restoring, test your application:

```bash
python manage.py runserver
```

Open http://127.0.0.1:8000/ and test the Generate Chart button.

üìû NEED HELP?
=============

If you need help with specific git commands, let me know:
1. What `git status` shows
2. What `git log --oneline -5` shows
3. What specific state you want to restore to

I can then give you the exact commands to run.
